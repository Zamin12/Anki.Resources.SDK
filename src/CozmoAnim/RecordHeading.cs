// Copyright © 2020 Randall Maas. All rights reserved.
// See LICENSE file in the project root for full license information.  
// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Anki.CozmoAnim
{

using global::System;
using global::FlatBuffers;

/// <summary>
/// The RecordHeading structure is used to recording the robots heading, at the
/// start of an animation. [or possibly after a randomized body motion?]  
/// </summary>
public struct RecordHeading : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RecordHeading GetRootAsRecordHeading(ByteBuffer _bb) { return GetRootAsRecordHeading(_bb, new RecordHeading()); }
  public static RecordHeading GetRootAsRecordHeading(ByteBuffer _bb, RecordHeading obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RecordHeading __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// <summary>
  /// The time when the robot should record his heading
  /// </summary>
  public uint TriggerTimeMs { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<RecordHeading> CreateRecordHeading(FlatBufferBuilder builder,
      uint triggerTime_ms = 0) {
    builder.StartObject(1);
    RecordHeading.AddTriggerTimeMs(builder, triggerTime_ms);
    return RecordHeading.EndRecordHeading(builder);
  }

  public static void StartRecordHeading(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) { builder.AddUint(0, triggerTimeMs, 0); }
  public static Offset<RecordHeading> EndRecordHeading(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RecordHeading>(o);
  }
};


}
