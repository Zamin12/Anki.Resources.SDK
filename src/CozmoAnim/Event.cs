// Copyright © 2020 Randall Maas. All rights reserved.
// See LICENSE file in the project root for full license information.  
// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Anki.CozmoAnim
{

using global::System;
using global::FlatBuffers;

/// <summary>
/// The Event structure is used to pause the animation at the given time code
/// until the event is received or cancelled.  When the event is received, the
/// animation resumes the given time code.   
/// </summary>
public struct Event : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Event GetRootAsEvent(ByteBuffer _bb) { return GetRootAsEvent(_bb, new Event()); }
  public static Event GetRootAsEvent(ByteBuffer _bb, Event obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Event __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// <summary>
  /// The animation is paused at this time, until it receives the event.  Once
  /// the event is received, the animation is resumed from this point in time.
  /// </summary>
  public uint TriggerTimeMs { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// <summary>
  /// The name of the event to wait for.  Required
  /// </summary>
  public string EventId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventIdBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetEventIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEventIdArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<Event> CreateEvent(FlatBufferBuilder builder,
      uint triggerTime_ms = 0,
      StringOffset event_idOffset = default(StringOffset)) {
    builder.StartObject(2);
    Event.AddEventId(builder, event_idOffset);
    Event.AddTriggerTimeMs(builder, triggerTime_ms);
    return Event.EndEvent(builder);
  }

  public static void StartEvent(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) { builder.AddUint(0, triggerTimeMs, 0); }
  public static void AddEventId(FlatBufferBuilder builder, StringOffset eventIdOffset) { builder.AddOffset(1, eventIdOffset.Value, 0); }
  public static Offset<Event> EndEvent(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // event_id
    return new Offset<Event>(o);
  }
};


}
