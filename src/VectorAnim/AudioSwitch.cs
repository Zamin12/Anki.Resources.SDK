// Copyright © 2020 Randall Maas. All rights reserved.
// See LICENSE file in the project root for full license information.  
// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Anki.VectorAnim
{

using global::System;
using global::FlatBuffers;

/// <summary>
/// The AudioSwitch structure is used to put an audio switch into a particular setting.
/// </summary>
public struct AudioSwitch : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AudioSwitch GetRootAsAudioSwitch(ByteBuffer _bb) { return GetRootAsAudioSwitch(_bb, new AudioSwitch()); }
  public static AudioSwitch GetRootAsAudioSwitch(ByteBuffer _bb, AudioSwitch obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AudioSwitch __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// <summary>
  /// The switch to modify. Default: 0
  /// </summary>
  public uint SwitchGroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// <summary>
  /// The new state to the put the switch into.  Default: 0
  /// </summary>
  public uint StateId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<AudioSwitch> CreateAudioSwitch(FlatBufferBuilder builder,
      uint switchGroupId = 0,
      uint stateId = 0) {
    builder.StartObject(2);
    AudioSwitch.AddStateId(builder, stateId);
    AudioSwitch.AddSwitchGroupId(builder, switchGroupId);
    return AudioSwitch.EndAudioSwitch(builder);
  }

  public static void StartAudioSwitch(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddSwitchGroupId(FlatBufferBuilder builder, uint switchGroupId) { builder.AddUint(0, switchGroupId, 0); }
  public static void AddStateId(FlatBufferBuilder builder, uint stateId) { builder.AddUint(1, stateId, 0); }
  public static Offset<AudioSwitch> EndAudioSwitch(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AudioSwitch>(o);
  }
};


}
