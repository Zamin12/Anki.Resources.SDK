// Copyright © 2020 Randall Maas. All rights reserved.
// See LICENSE file in the project root for full license information.  
// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Anki.VectorAnim
{

using global::System;
using global::FlatBuffers;

/// <summary>
/// The AudioEventGroup structure is used to randomly select an audio event (and
/// volume), and send it to the audio subsystem.  
/// </summary>
public struct AudioEventGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AudioEventGroup GetRootAsAudioEventGroup(ByteBuffer _bb) { return GetRootAsAudioEventGroup(_bb, new AudioEventGroup()); }
  public static AudioEventGroup GetRootAsAudioEventGroup(ByteBuffer _bb, AudioEventGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AudioEventGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// <summary>
  /// The audio event IDs, weighted by a probability. 
  /// </summary>
  public uint EventIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int EventIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventIdsBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetEventIdsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public uint[] GetEventIdsArray() { return __p.__vector_as_array<uint>(4); }
  /// <summary>
  /// The volume to play the selected audio at.
  /// </summary>
  public float Volumes(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int VolumesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVolumesBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetVolumesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetVolumesArray() { return __p.__vector_as_array<float>(6); }
  /// <summary>
  /// The probability weight that a given event will be selected.
  /// </summary>
  public float Probabilities(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ProbabilitiesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProbabilitiesBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetProbabilitiesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetProbabilitiesArray() { return __p.__vector_as_array<float>(8); }

  public static Offset<AudioEventGroup> CreateAudioEventGroup(FlatBufferBuilder builder,
      VectorOffset eventIdsOffset = default(VectorOffset),
      VectorOffset volumesOffset = default(VectorOffset),
      VectorOffset probabilitiesOffset = default(VectorOffset)) {
    builder.StartObject(3);
    AudioEventGroup.AddProbabilities(builder, probabilitiesOffset);
    AudioEventGroup.AddVolumes(builder, volumesOffset);
    AudioEventGroup.AddEventIds(builder, eventIdsOffset);
    return AudioEventGroup.EndAudioEventGroup(builder);
  }

  public static void StartAudioEventGroup(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddEventIds(FlatBufferBuilder builder, VectorOffset eventIdsOffset) { builder.AddOffset(0, eventIdsOffset.Value, 0); }
  public static VectorOffset CreateEventIdsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventIdsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVolumes(FlatBufferBuilder builder, VectorOffset volumesOffset) { builder.AddOffset(1, volumesOffset.Value, 0); }
  public static VectorOffset CreateVolumesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateVolumesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVolumesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProbabilities(FlatBufferBuilder builder, VectorOffset probabilitiesOffset) { builder.AddOffset(2, probabilitiesOffset.Value, 0); }
  public static VectorOffset CreateProbabilitiesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateProbabilitiesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartProbabilitiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AudioEventGroup> EndAudioEventGroup(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AudioEventGroup>(o);
  }
};


}
