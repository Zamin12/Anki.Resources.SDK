// Copyright © 2020 Randall Maas. All rights reserved.
// See LICENSE file in the project root for full license information.  
// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Anki.VectorAnim
{

using global::System;
using global::FlatBuffers;

/// <summary>
/// The BackpackLights structure is used to animate the lights on Vector’s back.
/// </summary>
public struct BackpackLights : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BackpackLights GetRootAsBackpackLights(ByteBuffer _bb) { return GetRootAsBackpackLights(_bb, new BackpackLights()); }
  public static BackpackLights GetRootAsBackpackLights(ByteBuffer _bb, BackpackLights obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BackpackLights __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// <summary>
  /// The time at which the backlights animation should begin.
  /// </summary>
  public uint TriggerTimeMs { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// <summary>
  /// The duration before a transition to the next backlight setting may begin.
  /// During this time the lights should be illuminated with these colors; after
  ///  this the colors may transition from these to the next colors.
  /// </summary>
  public uint DurationTimeMs { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// <summary>
  /// Each color is represented as 4 floats (red, green, blue, and alpha), in
  /// the range 0..1.  Alpha is always 0 (the value is ignored).
  /// </summary>
  public float Front(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int FrontLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFrontBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetFrontBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetFrontArray() { return __p.__vector_as_array<float>(8); }
  /// <summary>
  /// Each color is represented as 4 floats (red, green, blue, and alpha), in
  /// the range 0..1.  Alpha is always 0 (the value is ignored).
  /// </summary>
  public float Middle(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int MiddleLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMiddleBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetMiddleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetMiddleArray() { return __p.__vector_as_array<float>(10); }
  /// <summary>
  /// Each color is represented as 4 floats (red, green, blue, and alpha), in
  /// the range 0..1.  Alpha is always 0 (the value is ignored).
  /// </summary>
  public float Back(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int BackLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBackBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetBackBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public float[] GetBackArray() { return __p.__vector_as_array<float>(12); }

  public static Offset<BackpackLights> CreateBackpackLights(FlatBufferBuilder builder,
      uint triggerTime_ms = 0,
      uint durationTime_ms = 0,
      VectorOffset FrontOffset = default(VectorOffset),
      VectorOffset MiddleOffset = default(VectorOffset),
      VectorOffset BackOffset = default(VectorOffset)) {
    builder.StartObject(5);
    BackpackLights.AddBack(builder, BackOffset);
    BackpackLights.AddMiddle(builder, MiddleOffset);
    BackpackLights.AddFront(builder, FrontOffset);
    BackpackLights.AddDurationTimeMs(builder, durationTime_ms);
    BackpackLights.AddTriggerTimeMs(builder, triggerTime_ms);
    return BackpackLights.EndBackpackLights(builder);
  }

  public static void StartBackpackLights(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) { builder.AddUint(0, triggerTimeMs, 0); }
  public static void AddDurationTimeMs(FlatBufferBuilder builder, uint durationTimeMs) { builder.AddUint(1, durationTimeMs, 0); }
  public static void AddFront(FlatBufferBuilder builder, VectorOffset FrontOffset) { builder.AddOffset(2, FrontOffset.Value, 0); }
  public static VectorOffset CreateFrontVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFrontVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFrontVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMiddle(FlatBufferBuilder builder, VectorOffset MiddleOffset) { builder.AddOffset(3, MiddleOffset.Value, 0); }
  public static VectorOffset CreateMiddleVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMiddleVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMiddleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBack(FlatBufferBuilder builder, VectorOffset BackOffset) { builder.AddOffset(4, BackOffset.Value, 0); }
  public static VectorOffset CreateBackVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBackVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBackVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BackpackLights> EndBackpackLights(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BackpackLights>(o);
  }
};


}
