// Copyright © 2020 Randall Maas. All rights reserved.
// See LICENSE file in the project root for full license information.  
// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Anki.VectorAnim
{

using global::System;
using global::FlatBuffers;

/// <summary>
/// The SpriteBox structure defines a rectangular region on the display to draw an image from a file.  
/// </summary>
public struct SpriteBox : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SpriteBox GetRootAsSpriteBox(ByteBuffer _bb) { return GetRootAsSpriteBox(_bb, new SpriteBox()); }
  public static SpriteBox GetRootAsSpriteBox(ByteBuffer _bb, SpriteBox obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SpriteBox __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// <summary>
  /// The time when Vector should begin to use this sprite box. 
  /// </summary>
  public uint TriggerTimeMs { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// <summary>
  /// The name of the sprite box. The animation engine may use this to select
  /// the procedure(s) in charge managing the layer and sprite boxes. If an
  /// image map is available for this animation, the sprite sequence it
  /// describes will be displayed in this rectangle.
  /// </summary>
  public string SpriteBoxName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpriteBoxNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetSpriteBoxNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSpriteBoxNameArray() { return __p.__vector_as_array<byte>(6); }
  /// <summary>
  /// The name of the layer.  The animation engine may use this to select the
  /// procedure(s) in charge managing the layer and sprite boxes
  /// </summary>
  public string Layer { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLayerBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetLayerBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLayerArray() { return __p.__vector_as_array<byte>(8); }
  /// <summary>
  /// This can be the name of a sprite sequence, independent sprite, or
  /// "clear_sprite_box" for an empty image.  
  /// </summary>
  public string AssetName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetNameBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetAssetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAssetNameArray() { return __p.__vector_as_array<byte>(10); }
  /// <summary>
  /// "CustomHue" if the PNG images should be converted from gray scale to the
  /// colour using the current eye colour setting.
  /// "RGBA" if the image should be drawn as is.
  /// </summary>
  public string RenderMethod { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRenderMethodBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetRenderMethodBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetRenderMethodArray() { return __p.__vector_as_array<byte>(12); }
  public string SpriteSeqEndType { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpriteSeqEndTypeBytes() { return __p.__vector_as_span(14); }
#else
  public ArraySegment<byte>? GetSpriteSeqEndTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSpriteSeqEndTypeArray() { return __p.__vector_as_array<byte>(14); }
  /// <summary>
  /// The % opacity of the image pixels.  Default is 100.0
  /// </summary>
  public float Alpha { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)100.0f; } }
  /// <summary>
  /// The x coordinate of the upper left hand corner of the sprite box.  The x 
  /// coordinate can be outside of the display area; only the portion of the
  /// image within the display area (0..183) will be shown.  This allows an
  /// image to slide in..  Default: 0
  /// </summary>
  public int XPos { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// <summary>
  /// The y coordinate of the upper left hand corner of the sprite box.  The y
  /// coordinate can be outside of the display area; only the portion of the
  /// image within the display area (0..95) will be shown.  This allows an
  /// image to slide in.  Default: 00
  /// </summary>
  public int YPos { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// <summary>
  /// The width of the sprite box. Unit: pixels
  /// </summary>
  public uint Width { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// <summary>
  /// The height of the sprite box. Unit: pixels
  /// </summary>
  public uint Height { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<SpriteBox> CreateSpriteBox(FlatBufferBuilder builder,
      uint triggerTime_ms = 0,
      StringOffset spriteBoxNameOffset = default(StringOffset),
      StringOffset layerOffset = default(StringOffset),
      StringOffset assetNameOffset = default(StringOffset),
      StringOffset renderMethodOffset = default(StringOffset),
      StringOffset spriteSeqEndTypeOffset = default(StringOffset),
      float alpha = 100.0f,
      int xPos = 0,
      int yPos = 0,
      uint width = 0,
      uint height = 0) {
    builder.StartObject(11);
    SpriteBox.AddHeight(builder, height);
    SpriteBox.AddWidth(builder, width);
    SpriteBox.AddYPos(builder, yPos);
    SpriteBox.AddXPos(builder, xPos);
    SpriteBox.AddAlpha(builder, alpha);
    SpriteBox.AddSpriteSeqEndType(builder, spriteSeqEndTypeOffset);
    SpriteBox.AddRenderMethod(builder, renderMethodOffset);
    SpriteBox.AddAssetName(builder, assetNameOffset);
    SpriteBox.AddLayer(builder, layerOffset);
    SpriteBox.AddSpriteBoxName(builder, spriteBoxNameOffset);
    SpriteBox.AddTriggerTimeMs(builder, triggerTime_ms);
    return SpriteBox.EndSpriteBox(builder);
  }

  public static void StartSpriteBox(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddTriggerTimeMs(FlatBufferBuilder builder, uint triggerTimeMs) { builder.AddUint(0, triggerTimeMs, 0); }
  public static void AddSpriteBoxName(FlatBufferBuilder builder, StringOffset spriteBoxNameOffset) { builder.AddOffset(1, spriteBoxNameOffset.Value, 0); }
  public static void AddLayer(FlatBufferBuilder builder, StringOffset layerOffset) { builder.AddOffset(2, layerOffset.Value, 0); }
  public static void AddAssetName(FlatBufferBuilder builder, StringOffset assetNameOffset) { builder.AddOffset(3, assetNameOffset.Value, 0); }
  public static void AddRenderMethod(FlatBufferBuilder builder, StringOffset renderMethodOffset) { builder.AddOffset(4, renderMethodOffset.Value, 0); }
  public static void AddSpriteSeqEndType(FlatBufferBuilder builder, StringOffset spriteSeqEndTypeOffset) { builder.AddOffset(5, spriteSeqEndTypeOffset.Value, 0); }
  public static void AddAlpha(FlatBufferBuilder builder, float alpha) { builder.AddFloat(6, alpha, 100.0f); }
  public static void AddXPos(FlatBufferBuilder builder, int xPos) { builder.AddInt(7, xPos, 0); }
  public static void AddYPos(FlatBufferBuilder builder, int yPos) { builder.AddInt(8, yPos, 0); }
  public static void AddWidth(FlatBufferBuilder builder, uint width) { builder.AddUint(9, width, 0); }
  public static void AddHeight(FlatBufferBuilder builder, uint height) { builder.AddUint(10, height, 0); }
  public static Offset<SpriteBox> EndSpriteBox(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    builder.Required(o, 6);  // spriteBoxName
    builder.Required(o, 8);  // layer
    builder.Required(o, 10);  // assetName
    builder.Required(o, 12);  // renderMethod
    builder.Required(o, 14);  // spriteSeqEndType
    return new Offset<SpriteBox>(o);
  }
};


}
