// Copyright © 2020 Randall Maas. All rights reserved.
// See LICENSE file in the project root for full license information.  
// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Anki.VectorAnim
{

using global::System;
using global::FlatBuffers;

/// <summary>
/// The AudioParameter structure is used to set one of the sound parameters in
/// the AudioKinetic Wwise subsystem.  
/// </summary>
public struct AudioParameter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AudioParameter GetRootAsAudioParameter(ByteBuffer _bb) { return GetRootAsAudioParameter(_bb, new AudioParameter()); }
  public static AudioParameter GetRootAsAudioParameter(ByteBuffer _bb, AudioParameter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AudioParameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// <summary>
  /// The identifier of the parameter to set.  Default: 0
  /// </summary>
  public uint ParameterID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  /// <summary>
  /// The value to set the parameter to.  Default: 0
  /// </summary>
  public float Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// <summary>
  /// The time at which the parameter should be set.  Default: 0
  /// </summary>
  public uint TimeMs { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public byte CurveType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<AudioParameter> CreateAudioParameter(FlatBufferBuilder builder,
      uint parameterID = 0,
      float value = 0.0f,
      uint time_ms = 0,
      byte curveType = 0) {
    builder.StartObject(4);
    AudioParameter.AddTimeMs(builder, time_ms);
    AudioParameter.AddValue(builder, value);
    AudioParameter.AddParameterID(builder, parameterID);
    AudioParameter.AddCurveType(builder, curveType);
    return AudioParameter.EndAudioParameter(builder);
  }

  public static void StartAudioParameter(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddParameterID(FlatBufferBuilder builder, uint parameterID) { builder.AddUint(0, parameterID, 0); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(1, value, 0.0f); }
  public static void AddTimeMs(FlatBufferBuilder builder, uint timeMs) { builder.AddUint(2, timeMs, 0); }
  public static void AddCurveType(FlatBufferBuilder builder, byte curveType) { builder.AddByte(3, curveType, 0); }
  public static Offset<AudioParameter> EndAudioParameter(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AudioParameter>(o);
  }
};


}
